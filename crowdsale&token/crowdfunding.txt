pragma solidity ^0.4.25;

contract token {
    function transfer(address receiver, uint amount) external;
    function Balance1() external;
}

contract Crowdsale {
    address public beneficiary;
    uint public fundingGoal;
    uint public amountRaised;
    uint public deadline;
    uint public price;
    token public tokenReward;
    mapping(address => uint256) public balanceOf;
    bool fundingGoalReached = false;
    bool crowdsaleClosed = false;
    address public senderAddress;

    event GoalReached(address recipient, uint totalAmountRaised);
    event FundTransfer(address backer, uint amount, bool isContribution);

  
    constructor(
        address ifSuccessfulSendTo,
        uint fundingGoalInEthers,
        uint durationInMinutes,
        uint etherCostOfEachToken,
        address addressOfTokenUsedAsReward
    ) public {
        beneficiary = ifSuccessfulSendTo;
        fundingGoal = fundingGoalInEthers * 1 ether;
        deadline = now + durationInMinutes * 1 minutes;
        price = etherCostOfEachToken * 1 ether;
        tokenReward = token(addressOfTokenUsedAsReward);
    }
  
    function () payable public {
        require(!crowdsaleClosed);
       
        uint amount = msg.value;
        balanceOf[msg.sender] += amount;
        senderAddress = msg.sender;
        amountRaised += amount;
        tokenReward.transfer(msg.sender, amount / price);
       emit FundTransfer(msg.sender, amount, true);
    
    }

    modifier afterDeadline() { if (now >= deadline) _; }

    function checkGoalReached() public afterDeadline {
        if (amountRaised >= fundingGoal){
            fundingGoalReached = true;
            emit GoalReached(beneficiary, amountRaised);
        }
        crowdsaleClosed = true;
    }


  
    function safeWithdrawal() public afterDeadline {
        if (!fundingGoalReached) {
            uint amount = balanceOf[msg.sender];
            balanceOf[msg.sender] = 0;
            if (amount > 0) {
                if (msg.sender.send(amount)) {
                   emit FundTransfer(msg.sender, amount, false);
                } else {
                    balanceOf[msg.sender] = amount;
                }
            }
        }

        if (fundingGoalReached && beneficiary == msg.sender) {
            if (beneficiary.send(amountRaised)) {
               emit FundTransfer(beneficiary, amountRaised, false);
            } else {
                fundingGoalReached = false;
            }
        }
    }
    
// mapping (address=>uint256) public totalTokenOwnedByUser;
// address[] public tokenOwnedUser;
// modifier onlyOwner(){
//         require(msg.sender==beneficiary,"only owner can modify this function");
//         _;
//     }
// uint256 public totalValue;
// address public tokenAddress;
// function transferEtherBackToUser() payable public onlyOwner {
//         uint arrayLength = tokenOwnedUser.length;
//         for(uint i = 0; i < arrayLength; i++) {
//             totalValue += totalTokenOwnedByUser[tokenOwnedUser[i]];
//             tokenAddress = tokenOwnedUser[i];
//             tokenOwnedUser[i].transfer(totalTokenOwnedByUser[tokenOwnedUser[i]]);
//         }

//     }
    
   
}


